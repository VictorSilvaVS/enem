#!/usr/bin/env python3
"""
Script de setup automatizado para o Sistema de Estudos ENEM
"""

import os
import sys
import subprocess
import platform

def run_command(command, description):
    """Executa um comando e mostra o progresso"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao {description.lower()}: {e}")
        print(f"Comando: {command}")
        print(f"Erro: {e.stderr}")
        return False

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    print("üêç Verificando vers√£o do Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio!")
        print(f"Vers√£o atual: {version.major}.{version.minor}.{version.micro}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK!")
    return True

def create_virtual_environment():
    """Cria ambiente virtual"""
    if os.path.exists("venv"):
        print("‚úÖ Ambiente virtual j√° existe!")
        return True
    
    return run_command("python -m venv venv", "Criando ambiente virtual")

def activate_virtual_environment():
    """Ativa o ambiente virtual"""
    if platform.system() == "Windows":
        activate_script = "venv\\Scripts\\activate"
    else:
        activate_script = "source venv/bin/activate"
    
    print(f"üîÑ Ativando ambiente virtual...")
    print(f"Execute: {activate_script}")
    return True

def install_dependencies():
    """Instala as depend√™ncias"""
    if platform.system() == "Windows":
        pip_cmd = "venv\\Scripts\\pip"
    else:
        pip_cmd = "venv/bin/pip"
    
    return run_command(f"{pip_cmd} install -r requirements.txt", "Instalando depend√™ncias")

def create_env_file():
    """Cria arquivo .env se n√£o existir"""
    env_file = ".env"
    if os.path.exists(env_file):
        print("‚úÖ Arquivo .env j√° existe!")
        return True
    
    print("üìù Criando arquivo .env...")
    env_content = """# Configura√ß√µes do Sistema ENEM
SECRET_KEY=dev-secret-key-change-this-in-production
DATABASE_URL=sqlite:///enem_study_system.db
FLASK_ENV=development
FLASK_DEBUG=True
"""
    
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env criado!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivo .env: {e}")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = [
        "app/assets/uploads",
        "app/assets/css",
        "app/assets/js",
        "logs"
    ]
    
    print("üìÅ Criando diret√≥rios necess√°rios...")
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ Diret√≥rio {directory} criado/verificado")
        except Exception as e:
            print(f"‚ùå Erro ao criar diret√≥rio {directory}: {e}")
            return False
    return True

def populate_database():
    """Popula o banco de dados"""
    if platform.system() == "Windows":
        python_cmd = "venv\\Scripts\\python"
    else:
        python_cmd = "venv/bin/python"
    
    return run_command(f"{python_cmd} populate_db.py", "Populando banco de dados")

def show_next_steps():
    """Mostra os pr√≥ximos passos"""
    print("\n" + "="*60)
    print("üéâ SETUP CONCLU√çDO COM SUCESSO!")
    print("="*60)
    
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Ative o ambiente virtual:")
    if platform.system() == "Windows":
        print("   venv\\Scripts\\activate")
    else:
        print("   source venv/bin/activate")
    
    print("\n2. Execute o sistema:")
    print("   python main.py")
    
    print("\n3. Acesse no navegador:")
    print("   http://localhost:5000")
    
    print("\nüë§ CREDENCIAIS DE ACESSO:")
    print("   Admin: admin / admin123")
    print("   Teste: teste / teste123")
    
    print("\nüîß CONFIGURA√á√ïES IMPORTANTES:")
    print("   - Altere a SECRET_KEY no arquivo .env para produ√ß√£o")
    print("   - Configure HTTPS para ambiente de produ√ß√£o")
    print("   - Use um banco de dados robusto (PostgreSQL) para produ√ß√£o")
    
    print("\nüìö DOCUMENTA√á√ÉO:")
    print("   Consulte o README.md para mais informa√ß√µes")
    
    print("\n" + "="*60)

def main():
    """Fun√ß√£o principal do setup"""
    print("üöÄ INICIANDO SETUP DO SISTEMA DE ESTUDOS ENEM")
    print("="*60)
    
    # Verificar Python
    if not check_python_version():
        return False
    
    # Criar ambiente virtual
    if not create_virtual_environment():
        return False
    
    # Criar diret√≥rios
    if not create_directories():
        return False
    
    # Criar arquivo .env
    if not create_env_file():
        return False
    
    # Instalar depend√™ncias
    if not install_dependencies():
        return False
    
    # Popular banco de dados
    if not populate_database():
        return False
    
    # Mostrar pr√≥ximos passos
    show_next_steps()
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        print("\n‚ùå Setup falhou! Verifique os erros acima.")
        sys.exit(1)
    else:
        print("\n‚úÖ Setup conclu√≠do com sucesso!")
